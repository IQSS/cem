library(cem)
library(cem)
data(LL)
todrop <- c("treated","re78")
imbalance(LL$treated, LL, drop=todrop)
# cem match: automatic bin choice
mat <- cem(treatment="treated", data=LL, drop="re78")
mat
# cem match: user choiced coarsening
re74cut <- hist(LL$re74, br=seq(0,max(LL$re74)+1000, by=1000),plot=FALSE)$breaks
re75cut <- hist(LL$re75, br=seq(0,max(LL$re75)+1000, by=1000),plot=FALSE)$breaks
agecut <- hist(LL$age, br=seq(15,55, length=14),plot=FALSE)$breaks
mycp <- list(re75=re75cut, re74=re74cut, age=agecut)
mat <- cem(treatment="treated",data=LL, drop="re78",cutpoints=mycp)
mat
# cem match: user choiced coarsening, k-to-k matching
mat <- cem(treatment="treated",data=LL, drop="re78",cutpoints=mycp,k2k=TRUE)
mat
# mahalnobis matching: we use MatchIt
if(require(MatchIt)){
mah <- matchit(treated~age+education+re74+re75+black+hispanic+nodegree+married+u74+u75,
distance="mahalanobis", data=LL)
mah
#imbalance
imbalance(LL$treated, LL, drop=todrop, weights=mah$weights)
}
# Multiply Imputed data
# making use of Amelia for multiple imputation
if(require(Amelia)){
data(LL)
n <- dim(LL)[1]
k <- dim(LL)[2]
set.seed(123)
LL1 <- LL
idx <- sample(1:n, .3*n)
for(i in idx){
LL1[i,sample(2:k,1)] <- NA
}
imputed <- amelia(LL1,noms=c("black","hispanic","treated","married",
"nodegree","u74","u75"))
imputed <- imputed$imputations[1:5]
# without information on which observation has missing values
mat1 <- cem("treated", datalist=imputed, drop="re78")
mat1
# ATT estimation
out <- att(mat1, re78 ~ treated, data=imputed)
# with information about missingness
mat2 <- cem("treated", datalist=imputed, drop="re78", data=LL1)
mat2
# ATT estimation
out <- att(mat2, re78 ~ treated, data=imputed)
}
data(LL)
n <- dim(LL)[1]
k <- dim(LL)[2]
# we generate missing values in 30 percent of the rows of LL data
# randomly in one colum per row
set.seed(123)
LL1 <- LL
idx <- sample(1:n, .3*n)
for(i in idx){
LL1[i,sample(2:k,1)] <- NA
}
imputed <- amelia(LL1)
imputed <- imputed$imputations[1:5]
mat <- cem("treated", datalist=imputed, data=LL1, drop="re78")
print(mat)
att(mat, re78 ~ treated, data=imputed)
}
data(LL)
n <- dim(LL)[1]
k <- dim(LL)[2]
# we generate missing values in 30 percent of the rows of LL data
# randomly in one colum per row
set.seed(123)
LL1 <- LL
idx <- sample(1:n, .3*n)
for(i in idx){
LL1[i,sample(2:k,1)] <- NA
}
imputed <- amelia(LL1)
imputed <- imputed$imputations[1:5]
mat <- cem("treated", datalist=imputed, data=LL1, drop="re78")
print(mat)
att(mat, re78 ~ treated, data=imputed)
data(LL)
tmp <- cemspace("treated", LL, drop="re78", M=50)
data(LL)
set.seed(123)
sp1 <- spacegraph("treated", LL, drop="re78", M=5,
R=list(cem=5,psm=5, mdm=0))
## Note that we must use the same L1 measure from the first spacegraph!
sp2 <- spacegraph("treated", LL, drop="re78", raw.profile=sp1$raw.profile,
R=list(cem=0,psm=0, mdm=5))
sp3 <- combine.spacegraphs(sp1,sp2)
plot(sp3)
data(LL)
todrop <- c("treated","re78")
imbalance(LL$treated, LL, drop=todrop)
# cem match: automatic bin choice
mat <- cem(treatment="treated", data=LL, drop="re78")
data(LL)
mat <- cem("treated", LL, drop=c("re78","treated"),
cut=list(age=4, edu=4, re74=3, re75=3), keep.all=TRUE)
mat
imb.raw <- L1.profile(LL$treated, LL[, mat$vars], M=250, plot=FALSE)
imbsp <- imbspace(mat, LL,depth=2, raw.profile=imb.raw,
maximal=6, minimal=2, fixed=c("hispanic", "black", "married",
"nodegree","u74","u75"), plot=FALSE)
tmp <- plot(imbsp,data=LL,explore=interactive())
tmp
data(LL)
set.seed(123)
# cem match: automatic bin choice
mat <- cem(treatment="treated", data=LL, drop="re78", keep.all=TRUE)
mat
mat$k2k
# ATT estimate
att(mat, re78 ~ treated, data=LL)
# transform the match into k2k
mat2 <- k2k(mat, LL, "euclidean", 1)
mat2
mat2$k2k
# ATT estimate after k2k
att(mat2, re78 ~ treated, data=LL)
data(LL)
set.seed(123)
L1.meas(LL$treated,LL, drop=c("treated","re78"))
set.seed(123)
data(LL)
for(i in c(4:6,10:12))
LL[[i]] <- factor(LL[[i]])
imb0 <- L1.profile(LL$treated,LL, drop=c("treated","re78"))
if(require(MatchIt)){
m2 <- matchit(treated ~ black + hispanic + married + nodegree +
u74 + u75 + education + age + re74 + re75, data=LL,
distance="logit")
m3 <- matchit(treated ~ black + hispanic + married + nodegree +
u74 + u75 + education + age + re74 + re75, data=LL,
distance="mahalanobis")
L1.profile(LL$treated,LL, drop=c("treated","re78"),
weights=m2$w, add=TRUE, col="green", lty=2, useCP=imb0$CP)
L1.profile(LL$treated,LL, drop=c("treated","re78"),
weights=m3$w, add=TRUE, col="orange", lty=3, useCP=imb0$CP)
}
set.seed(123)
data(LL)
for(i in c(4:6,10:12))
LL[[i]] <- factor(LL[[i]])
imb0 <- L1.profile(LL$treated,LL, drop=c("treated","re78"))
if(require(MatchIt)){
m2 <- matchit(treated ~ black + hispanic + married + nodegree +
u74 + u75 + education + age + re74 + re75, data=LL,
distance="logit")
m3 <- try(matchit(treated ~ black + hispanic + married + nodegree +
u74 + u75 + education + age + re74 + re75, data=LL,
distance="mahalanobis"), TRUE)
L1.profile(LL$treated,LL, drop=c("treated","re78"),
weights=m2$w, add=TRUE, col="green", lty=2, useCP=imb0$CP)
if(class(m3)[1]!="try-error"){
L1.profile(LL$treated,LL, drop=c("treated","re78"),
weights=m3$w, add=TRUE, col="orange", lty=3, useCP=imb0$CP)
}
}
m1 <- cem("treated", LL, drop="re78")
L1.profile(LL$treated,LL, drop=c("treated","re78"),
weights=m1$w>0, add=TRUE, col="blue", lty=4, useCP=imb0$CP)
legend(5, 0.9, legend=c("raw data", "pscore", "mahalanobis", "cem"),
lty=1:4, col=c("red", "green", "orange", "blue"))
data(LL)
set.seed(123)
# cem match: automatic bin choice
mat <- cem(data=LL, drop="re78")
# we want a set of paired units
psample <- pair(mat, data=LL)
table(psample$paired)
psample$paired[1:100]
table(psample$full.paired)
psample$full.paired[1:10]
# cem match: automatic bin choice, we drop one row from the data set
mat1 <- cem(data=LL[-1,], drop="re78")
# we want a set of paired units but we have an odd number of units in the data
psample <- pair(mat1, data=LL[-1,])
table(psample$full.paired)
set.seed(123)
data(LL)
mod <- pscoreSelect( treated ~ age + education + black+ married + nodegree +
re74 + re75 + hispanic + u74 + u75, data=LL)
print(mod)
}
set.seed(123)
data(LL)
mod <- pscoreSelect( treated ~ age + education + black+ married + nodegree +
re74 + re75 + hispanic + u74 + u75, data=LL)
print(mod)
data(LL)
set.seed(123)
mat <- cem(treatment="treated",data=LL, drop="re78", keep.all=TRUE)
mat
tab <- relax.cem(mat, LL, depth=1, plot=FALSE)
relax.plot(tab, group="1")
plot(tab, group="1")
relax.plot(tab, group="1", unique=TRUE)
relax.plot(tab, group="1", perc=0.6)
relax.plot(tab, group="1", perc=0.6,unique=TRUE)
tab1 <- relax.cem(mat, LL, depth=1, minimal=list(re74=6, age=3, education=3, re75=5))
tab2 <- relax.cem(mat, LL, depth=1, minimal=list(re74=6, age=3,
education=3, re75=5), shifts=0.01)
tab3 <- relax.cem(mat, LL, depth=1, minimal=list(age=3, education=3),
fixed=c("re74","re75"))
tab4 <- relax.cem(mat, LL, depth=2, minimal=list(age=4,
education=3,re75=6),plot=FALSE, fixed="re74")
relax.plot(tab4)
relax.plot(tab4, unique=TRUE)
relax.plot(tab4, perc=0.7)
data(LL)
set.seed(123)
m74 <- max(LL$re74, na.rm=TRUE)
s74 <- seq(0,m74,by=sd(LL$re74))
l74 <- length(s74)
if(max(s74) < m74) s74 <- c(s74, m74)
m75 <- max(LL$re75, na.rm=TRUE)
s75 <- seq(0,m75,by=sd(LL$re75))
l75 <- length(s75)
if(max(s75) < m75) s75 <- c(s75, m75)
mybr = list(re74=s74,
re75 = s75,
age = hist(LL$age,plot=FALSE)$breaks,
education = hist(LL$education,plot=FALSE)$breaks)
mat <- cem(treatment="treated",data=LL, drop="re78",cut=mybr)
mat
shift.cem(mat, data=LL, shifts=seq(0.01, 0.5, length=10), verb=1)
data(LL)
set.seed(123)
sp <- spacegraph("treated", LL, drop="re78", M=5,
R=list(cem=5,psm=5, mdm=5))
plot(sp)
## ABOUT THE PLOTTING TOOL:
## The circled solution is the current selection.
## Solutions that are strictly better are also circled.
## The gui provides the exact call to re-run the selected matching solution.
## The call can also be edited, re-run by clicking the button, and
## automatically added to the existing spacegraph.
## CEM solutions can also be adjusted variable by variable and re-run.
## Some plotting parameters can be changed
plot(sp, main="Comparison of Matching Methods",
ylab="L1", xlim=c(300,50), ylim=c(0,.7))
## You can specify whether the x-axis shows treated units,
## control units, or all units using the argument N, which
## can take the values "treated", "control", or "all".
## Default is "treated".
plot(sp, N="all")
## You can specify how the x-axis is scaled.  Setting scale.var=T
## gives you the scaling as 1/sqrt(n).  Setting scale.var=F gives
## scales it linearly.  Default is scale.var=T.
plot(sp, scale.var=F)
## You can also specify which measure of balance to use
## by specifying the argument "balance.metric" as
## "L1", "mdiff" (Avg. standardized difference in means),
## or "mdisc" (Average Malanobis Discrepancy).  Default is "L1".
plot(sp, balance.metric="mdiff")
plot(sp, balance.metric="mdisc")
## Matching solutions from other methods can be included in
## a spacegraph by using the argument "other.matches".
## First, Run a matching method.  Here, propensity scores from MatchIt.
library(MatchIt)
m.out <- matchit(formula=treated ~ education+age, data=LL, method = "nearest")
## Put the required information into a list of data frames.
## Note, there are many ways to do this.
mymatches <- list(data.frame(names(m.out$w)))
names(mymatches[[1]])[1] <- "id"
mymatches[[1]]$weight <- m.out$w
mymatches[[1]]$method <- "matchit psm"
sp <- spacegraph("treated", LL, drop="re78", M=5,
R=list(cem=5,psm=5, mdm=5), other.matches=mymatches)
plot(sp)
library(cem)
library(cem)
library(cem)
library(cem)
3 >= 1
library(cem)
